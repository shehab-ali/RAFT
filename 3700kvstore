#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        # FIX THIS LATER
        self.cluster = len(self.others) + 1
        self.curr_term = 0
        self.leader = 'FFFF'
        self.have_leader = False
        self.log = []
        self.voted_for = 0
        self.time_out = .6
        self.votes = []
        self.in_election = False
        self.leader_time = time.time()
        self.heartbeat_time = time.time()
        self.store = {}

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')

            #print("Received message '%s'" % (msg,), flush=True)

            msg = json.loads(msg)
                            
            if self.have_leader and (time.time() - self.heartbeat_time) > .1:
                self.heartbeat_message()
                
            if msg['type'] == 'get' or msg['type'] == 'put':
                #print(msg)
                self.get_put_message(msg)
            elif msg['type'] == 'heartbeat':
                self.append_entries_message(msg)
                self.leader_time = time.time()
            elif msg['type'] == 'send_request_vote':
                self.recv_request_vote_message(msg)
            elif msg['type'] == 'recv_request_vote':
                self.do_election(msg)
            
            if not self.have_leader and (time.time() - self.leader_time) > self.time_out:
                self.election()
            
    def fail_message(self, msg):
        message = dict()
        message['src'] = self.id
        message['dst'] = msg['src']
        message['leader'] = msg['leader']
        message['type'] = 'fail'
        message['MID'] = msg['MID']
        self.send(message)
    
    def leader_get_put_message(self, msg):
        message = dict()
        message['src'] = self.id
        message['dst'] = msg['src']
        message['leader'] = self.leader
        message['type'] = 'ok'
        message['MID'] = msg['MID']
        message['key'] = msg['key']
        
        if msg['type'] == 'get':
            val = self.store.get(msg['key'])
            if val :
                message['value'] = val
            else :
                message['value'] = ''

        elif msg['type'] == 'put':
            message['value'] = msg['value']
            self.store[msg['key']] = msg['value']
        self.send(message)
        
    def get_put_message(self, msg):
        if self.leader == BROADCAST:
            self.fail_message(msg)
            return
        if self.have_leader:
            self.leader_get_put_message(msg)
            return
        self.put_message(msg)

    def put_message(self, msg) :
        message = dict()
        message['src'] = self.id
        message['dst'] = msg['src']
        message['type'] = 'redirect'
        message['leader'] = self.leader
        message['MID'] = msg['MID']
        self.send(message)
        
    def append_entries_message(self, msg):
        message = dict()
        message['src'] = self.id
        message['dst'] = msg['src']
        message['type'] = 'append_entries'
        
        if not msg['entries']:
            
            if msg['term'] >= self.curr_term:
                self.leader = msg['leader']
                self.curr_term = msg['term']
                message['term'] = self.curr_term
                message['success'] = True
                message['leader'] = self.leader
            else :
                message['leader'] = self.leader
                message['term'] = self.curr_term
                message['success'] = False
            self.send(message)
            
        self.leader_time = time.time()
                
    def send_request_vote_message(self, rep):
        message = dict()
        message['src'] = self.id
        message['dst'] = rep
        message['leader'] = BROADCAST
        message['type'] = 'send_request_vote'
        message['term'] = self.curr_term
        message['cand_id'] = self.id
        message['last_log_index'] = len(self.log) - 1
        message['last_log_term'] = 0
        self.send(message)

    def election(self):
        self.curr_term += 1
        self.voted_for = self.id
        self.votes = [self.id]
        #may remove
        self.in_election = True
        self.leader_time = time.time()
        for rep in self.others:
            self.send_request_vote_message(rep)
            
    def recv_request_vote_message(self, msg):
        message = dict()
        message['src'] = self.id
        message['dst'] = msg['src']
        message['leader'] = BROADCAST
        message['type'] = 'recv_request_vote'
        message['term'] = self.curr_term
        
        if msg['term'] < self.curr_term:
            message['vote'] = True
        elif self.voted_for == 0 or self.voted_for == msg['cand_id']:
            if not self.log and msg['last_log_index'] == -1:
                message['vote'] = True
                self.voted_for = msg['src']
                # FIX LATER
                self.curr_term = msg['term']
            else:
                message['vote'] = False
        else:
            message['vote'] = False
        self.leader_time = time.time()
        self.send(message)
        
    def heartbeat_message(self):
        message = dict()
        message['src'] = self.id
        message['leader'] = self.leader
        message['type'] = 'heartbeat'
        message['entries'] = []
        message['term'] = self.curr_term
        for rep in self.others:
            message['dst'] = rep
            self.send(message)
        self.heartbeat_time = time.time()
        
    def do_election(self, msg):
        if not self.election :
            return
        if not msg['vote']:
            return
        self.votes.append(msg['src'])
        
        if len(self.votes) > (self.cluster/2):
            self.leader = self.id
            self.votes = []
            self.election = False
            self.have_leader = True
            self.heartbeat_message()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
