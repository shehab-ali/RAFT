#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        # FIX THIS LATER
        self.leader = '0000'
        self.store = {}

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))


    def put_message(self, msg) :
        self.store[msg['key']] = msg['value']
        message = {}
        message['src'] = msg['dst']
        message['dst'] = msg['src']
        message['leader'] = self.leader
        message['type'] = 'ok'
        message['MID'] = msg['MID']
        message['key'] = msg['key']
        message['value'] = msg['value']
        
        self.send(message)
    
    def get_message(self, msg) :
        message = {}
        message['src'] = msg['dst']
        message['dst'] = msg['src']
        message['leader'] = self.leader
        message['type'] = 'ok'
        message['MID'] = msg['MID']
        
        if msg['key'] in self.store:
            message['value'] = self.store.get(msg['key'])
            self.send(message)
        else:
            self.fail_message(msg)
    
    def fail_message(self, msg):
        message = dict()
        message['src'] = self.id
        message['dst'] = msg['src']
        message['leader'] = 'FFFF'
        message['type'] = 'fail'
        message['MID'] = msg['MID']
        self.send(message)
    
    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')

            #print("Received message '%s'" % (msg,), flush=True)
            
            data_msg = json.loads(msg)

            if self.id != self.leader and (data_msg['type'] == 'get' or 'put'):
                message = {}
                message['src'] = data_msg['dst']
                message['dst'] = data_msg['src']
                message['leader'] = self.leader
                message['type'] = 'redirect'
                message['MID'] = data_msg['MID']
                self.send(message)

            elif data_msg['type'] == 'put':
                self.put_message(data_msg)
            if data_msg['type'] == 'get':
                self.get_message(data_msg)

            

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
